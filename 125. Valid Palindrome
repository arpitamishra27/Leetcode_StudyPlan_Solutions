'''
125. Valid Palindrome
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:

1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.
'''
class Solution:
    def isPalindrome(self, s: str) -> bool:
      
    #Thius question is solved by the two pointer approach 
    #We have started from 0 and assigned it to the left pointer 
    #We have assigned the right pointer as r and have assigned it to the last value so that we can      check the first and last value 
    
    # The main catch here was to eliminate the characters other than alphanumeric
    #Therefore we can check for them and increase the l and r pointers respectively.
    l,r=0, len(s)-1
        while l<r:
            while l<r and not self.alphanum(s[l]):
                l+=1  # if the value is not alphanumeric then we have to increment
                #left pointer by 1 
            while r>l and not self.alphanum(s[r]):
                r-=1 # if the value is not alphanumeric then we have to decrement
                #right pointer by 1 
            
            if s[l].lower() !=s[r].lower(): 
                return False
            l+=1
            r-=1
        return True    
    
    def alphanum(self,c):
        return (ord('A') <= ord(c) <= ord('Z') or
                ord('a')  <= ord(c) <= ord('z') or
                ord('0') <= ord(c) <= ord('9'))
    
    #We can use the builtin s.isalphanum() by python also instead of the function that we created
    #ord gives the ASCII values of the characters that we pass in it. 
