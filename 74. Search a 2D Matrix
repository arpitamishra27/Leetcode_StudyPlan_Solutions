'''
74. Search a 2D Matrix
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104
'''

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        
    
        
        ROWS=len(matrix) 
        COLS=len(matrix[0])
        
        top=0
        bot=ROWS-1
        while(top<=bot):
            row= (top+bot)//2
            if target> matrix[row][-1]:
                top= row+1
            elif target< matrix[row][0]:
                bot=row-1
            else:
                break
        if not(top<=bot):
            return False
        
        l,r=0, COLS-1
            
        while(l<=r):
            mid=l+(r-l)//2
            if target < matrix[row][mid]:
                r= mid-1
            elif target > matrix[row][mid]:
                l=mid+1
            else:
                return True
    
        
        
